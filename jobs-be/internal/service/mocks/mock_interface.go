// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/main.go

// Package mocks; is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceIntf is a mock of ServiceIntf interface.
type MockServiceIntf struct {
	ctrl     *gomock.Controller
	recorder *MockServiceIntfMockRecorder
}

// MockServiceIntfMockRecorder is the mock recorder for MockServiceIntf.
type MockServiceIntfMockRecorder struct {
	mock *MockServiceIntf
}

// NewMockServiceIntf creates a new mock instance.
func NewMockServiceIntf(ctrl *gomock.Controller) *MockServiceIntf {
	mock := &MockServiceIntf{ctrl: ctrl}
	mock.recorder = &MockServiceIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceIntf) EXPECT() *MockServiceIntfMockRecorder {
	return m.recorder
}

// GetService mocks base method.
func (m *MockServiceIntf) GetService(level, employment string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", level, employment)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockServiceIntfMockRecorder) GetService(level, employment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockServiceIntf)(nil).GetService), level, employment)
}

// GetServiceByID mocks base method.
func (m *MockServiceIntf) GetServiceByID(id int) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByID", id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByID indicates an expected call of GetServiceByID.
func (mr *MockServiceIntfMockRecorder) GetServiceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByID", reflect.TypeOf((*MockServiceIntf)(nil).GetServiceByID), id)
}
